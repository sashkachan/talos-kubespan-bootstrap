cluster:
  inlineManifests:
    - name: argocd-install
      contents: |
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: argocd-install
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
        - kind: ServiceAccount
          name: argocd-install
          namespace: kube-system
        ---
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: argocd-install
          namespace: kube-system
        ---
        apiVersion: v1
        kind: Namespace
        metadata:
          name: argocd
        ---
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: argocd-install
          namespace: kube-system
        spec:
          backoffLimit: 10
          template:
            metadata:
              labels:
                app: argocd-install
            spec:
              restartPolicy: OnFailure
              tolerations:
                - operator: Exists
                - effect: NoSchedule
                  operator: Exists
                - effect: NoExecute
                  operator: Exists
                - effect: PreferNoSchedule
                  operator: Exists
                - key: node-role.kubernetes.io/control-plane
                  operator: Exists
                  effect: NoSchedule
                - key: node-role.kubernetes.io/control-plane
                  operator: Exists
                  effect: NoExecute
                - key: node-role.kubernetes.io/control-plane
                  operator: Exists
                  effect: PreferNoSchedule
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                      - matchExpressions:
                          - key: node-role.kubernetes.io/control-plane
                            operator: Exists
              serviceAccount: argocd-install
              serviceAccountName: argocd-install
              hostNetwork: true
              containers:
              - name: argocd-install
                image: bitnami/kubectl:latest
                env:
                - name: KUBERNETES_SERVICE_HOST
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: status.podIP
                - name: KUBERNETES_SERVICE_PORT
                  value: "6443"
                command:
                  - /bin/sh
                  - -c
                  - |
                    echo "Installing ArgoCD..."
                    kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f - || true
                    kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml || true
                    kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "ClusterIP"}}' || true
                    echo "Creating ArgoCD HTTPRoute..."
                    kubectl apply -f - <<EOF
                    apiVersion: gateway.networking.k8s.io/v1beta1
                    kind: HTTPRoute
                    metadata:
                      name: argocd-server
                      namespace: argocd
                    spec:
                      parentRefs:
                        - name: cilium-gateway
                          namespace: kube-system
                      hostnames:
                        - argocd.k1-lb.internal
                      rules:
                        - matches:
                            - path:
                                type: PathPrefix
                                value: /
                          backendRefs:
                            - name: argocd-server
                              port: 80
                    EOF
                    kubectl patch configmap argocd-cmd-params-cm -n argocd --type merge -p '{"data":{"server.insecure":"true"}}' || true
                    kubectl rollout restart deployment argocd-server -n argocd || true
                    echo "ArgoCD installation complete"
